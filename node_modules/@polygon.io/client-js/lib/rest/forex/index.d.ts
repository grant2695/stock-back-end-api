import { IAggsQuery, IAggs } from "../stocks/aggregates";
import { IAggsGroupedDaily, IAggsGroupedDailyQuery } from "../stocks/aggregatesGroupedDaily";
import { IAggsPreviousCloseQuery, IAggsPreviousClose } from "../stocks/previousClose";
import { IConversionQuery, IConversion } from "./conversion";
import { IHistoricTicksQuery, IHistoricTicks } from "./historicTicks";
import { IForexLastQuote } from "./lastQuote";
import { IForexSnapshotAllTickersQuery, IForexSnapshotTickers, IForexSnapshot } from "./snapshots";
export { IConversionQuery, IConversion } from "./conversion";
export { IHistoricTicksQuery, IHistoricTicks } from "./historicTicks";
export { IForexLastQuote } from "./lastQuote";
export { IRealTimeCurrencyConversionQuery, IRealTimeCurrencyConversion, } from "./realTimeCurrencyConversion";
export { IForexSnapshotAllTickersQuery, IForexSnapshotTickers, IForexSnapshot, } from "./snapshots";
export interface IForexClient {
    aggregates: (ticker: string, multiplier: number, timespan: string, from: string, to: string, query?: IAggsQuery) => Promise<IAggs>;
    aggregatesGroupedDaily: (date: string, query?: IAggsGroupedDailyQuery) => Promise<IAggsGroupedDaily>;
    conversion: (from: string, to: string, query?: IConversionQuery) => Promise<IConversion>;
    historicTicks: (from: string, to: string, date: string, query?: IHistoricTicksQuery) => Promise<IHistoricTicks>;
    lastQuote: (from: string, to: string) => Promise<IForexLastQuote>;
    previousClose: (symbol: string, query?: IAggsPreviousCloseQuery) => Promise<IAggsPreviousClose>;
    snapshotAllTickers: (query?: IForexSnapshotAllTickersQuery) => Promise<IForexSnapshotTickers>;
    snapshotGainersLosers: (direction: "gainers" | "losers") => Promise<IForexSnapshotTickers>;
    snapshotTicker: (symbol: string) => Promise<IForexSnapshot>;
}
export declare const forexClient: (apiKey: string, apiBase?: string) => IForexClient;
export default forexClient;
